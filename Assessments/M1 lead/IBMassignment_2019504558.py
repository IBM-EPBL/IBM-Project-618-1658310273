# -*- coding: utf-8 -*-
"""IBMAssignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PK7jDL8Fn9S19REo1DkVEw21TN9SwBfM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

data_file = pd.read_csv("/content/Churn_Modelling .csv")

"""**UNIVARIATE ANALYSIS**"""

data_file[['CreditScore','Age','Tenure','Balance','EstimatedSalary']].describe()

sns.countplot(data_file.Gender)

x.head()

data_file.boxplot(column=['CreditScore'], grid='False', color='blue')
data_file.hist(column=['CreditScore'],grid='False', edgecolor='black')

print(data_file['CreditScore'].mean())
print(data_file['CreditScore'].median())
print(data_file['CreditScore'].std())

data_file['CreditScore'].value_counts()

sns.kdeplot(data_file['CreditScore'])

"""**BIVARIATE ANALYSIS**"""

data_file[['CreditScore','Age','Tenure','Balance','EstimatedSalary']].corr()

sns.scatterplot(data_file.Age,data_file.CreditScore)

data_file.groupby(by='HasCrCard').agg('mean')[['CreditScore','Age','Tenure','Balance','EstimatedSalary']]

sns.countplot(data=x,x='HasCrCard',hue='Gender')

pd.crosstab(x.Gender,x.HasCrCard)

"""**MULTIVARIATE ANALYSIS**"""

sns.pairplot(data=x[['CreditScore','Age','Tenure','Balance','EstimatedSalary','HasCrCard']],hue='HasCrCard')

"""**DESCRIPTIVE STATISTICS**"""

x.sum()

print(x.count())

print(x.mode())

print(x.min())

print(x.max())

print(x['CreditScore'].abs())

print(x['Tenure'].cumsum())

print(x['Tenure'].cumprod())

print(x['Tenure'].prod())

x.describe(include='all')

print(x.describe(include='object'))

print(x.describe(include='number'))

"""**HANDLE MISSING VALUES**"""

x.isnull()

a=pd.isnull(x['Tenure'])
print(a)

a=x.fillna(0)
b=x.fillna(method='pad')
c=x.fillna(method='bfill')
print(a,b,c)

"""**HANDLING OUTLIERS**"""

y=x
median = y.loc[y['Age']<100, 'Age'].median()
y.loc[y.Age > 50, 'Age'] = np.nan
drop()
y.fillna(median,inplace=True)
sns.boxplot(y.Age)

x.skew()

x_new=x[x.Exited == 1].Tenure
x_no=x[x.Exited == 0].Tenure
plt.xlabel("Tenure")
plt.ylabel("Churn Prediction")
plt.hist([x_new,x_no])
plt.show()

a=x.iloc[:,3:13].values      #Independent Variables
b=x.iloc[:,13:14].values   #Dependant Variables

ct=ColumnTransformer([("oh",OneHotEncoder(),[1,2])],remainder="passthrough")
a=ct.fit_transform(a)

x["Geography"].unique()

x["Gender"].unique()

import joblib
joblib.dump(ct,"churnct.pkl")

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
x_train,x_test,y_train,y_test = train_test_split(a,b,test_size=0.2,random_state=0)

x_train.shape

x_test.shape

sc=StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
joblib.dump(sc,"churndc.pkl")